---
layout: post
title: "Release: 1.0.0-RC1"
date: 2015-07-29 17:03:57 -0400
comments: true
categories: release
---

{% img right /images/posts/release-ilustration-1.gif Release 1.0.0-RC1 %}

That version is first of the RC series for Frontier network.

 Ethereum(J) is the library that can be embedded in any Java/Scala project
 and to provide full support for Ethereum protocol and sub services.
 
##### Getting Started
To get started and include a java library into your project all you need is 
to <!--more--> use your favorite build system, here is Maven and Gradlle snippet: 

{% codeblock Maven Snippet lang:xml https://gist.github.com/romanman/659e9e5b6b44b73b5755 %}  
   <repositories>
     <repository>
       <id>oss.jfrog.org</id>
       <name>Repository from JFrog</name>
       <url>http://oss.jfrog.org/simple/oss-snapshot-local/</url>
     </repository>
   </repositories>
 
 
   <dependency>
     <groupId>org.ethereum</groupId>
     <artifactId>ethereumj-core</artifactId>
     <version> 1.0.0-RC1 </version>
     <type>zip</type>
   </dependency>
{% endcodeblock %}     
	 
or	 
 
{% codeblock Gradle Snippet lang:groovy https://gist.github.com/romanman/cc82a7a698f800040e10 %}

   repositories {
     maven {
      url "https://oss.jfrog.org/libs-snapshot"
     }
    }

   compile ("org.ethereum:ethereumj-core:1.0.0-RC1")
{% endcodeblock %}     

 Also we have very simple starter example
 just do: 
 `git clone https://github.com/ether-camp/ethereumj.starter`
 and you can develop any Ethereum application.


 *So, what is in:*

##### RLPx network layer for channel protection
  
 Between each connected peers on the Ethereum network 
 there is a protection mechanism for encryption and decryption
 for all of the underlying traffic. 
  
 `org.ethereum.net.rlpx` - package is full implementation for the RLPx protocol
 
##### Peer Discovery 

 The peer discovery is ethereum way to manage network topology. Each peer
 tries over time to find best neighbours to exchange information with.
 That is beeing achieved by managing statistic table over the connected peers.
 
 `org.ethereum.net.rlpx.discover` - is full implementation for peer disovery protocol
 
##### Multi Peer Blockchain Syncronization
	
 The Ethereum protocol supports fast block chain download - using
 bittorent way of downloading multiple blocks simultaneously from different channels
 
 `org.ethereum.net.eth` - us full support of Eth subprotocol and multipeer blocks download

##### Full Ethereum VM Support 

 The heart of the Ethereum consensus protocol is the virtual machine.
 The virtual machines is running the contracts algorithms exactly the 
 same way on all the peers, tested and compatible with all implementations.
 
 `org.ethereum.vm` - full Ethereum Virtual Machine implemented]
	
##### Ethereum Repository Updates and Manipulations
 
 The data structure that supports consensys validation 
 algorithm, and eventually holding the full list of 
 ethereum affairs is called Ethereum Repository. 
 It embrace Ethereum Trie protocol, more can be 
 study [here](/blog/2015/07/05/Ethereum-Trie/)
   
 `org.ethereum.repository` - full Ethereum Virtual Machine implemented
      
##### Testing Notes

 The EthereumJ librarey Was tested on more than 800k blocks from POC-9 Olympics network and more than 7 million transactions, with final result of full consensus achieved.

 The library supports 99% of compatabiltiy kit test case. We support almost all test cases defined by 
 Ethereum development group, the several adge cases that we formally not support we decided to exclude
 at that stage for performance optimization.
 
##### More Code Samples
 
 Another good place get started is to go and try code samples from our smples repository  [repository](https://github.com/ethereum/ethereumj/tree/develop/ethereumj-core/src/main/java/org/ethereum/samples)
 you can run them right away after fetching them from the git.
